/*
  This file is automatically generated. Any changes will be overwritten.
  Modify products.component.ts instead.
*/
import { Injector, OnInit, OnDestroy } from '@angular/core';
import { NavigationEnd, Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs';

import { TestService } from '../test.service';
import { SecurityService } from '../security.service';

/*
  Component properties set from design-time.
*/
const { components } = require('../../../../meta/pages/products.json');

export class ProductsGenerated implements OnInit, OnDestroy {
  components = components;
  // Array of messages displayed by the notification component.
  messages = [];

  router: Router;

  route: ActivatedRoute;

  _location: Location;

  subscription: Subscription;

  security: SecurityService;

  test: TestService;

  getProductsResult: any;

  getProductsCount: any;

  parameters: any;

  Security: any;

  ngOnInit() {
    this.subscription = this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd && this instanceof <any>this.route.component) {
        this.parameters = this.route.snapshot.params;

        this.load();
      }
    });
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }


  load() {
    this.test.getProducts(null, this.components[0].allowPaging ? this.components[0].pageSize : null, this.components[0].allowPaging ? 0 : null, null, this.components[0].allowPaging)
    .then(result => {
      this.getProductsResult = result.value;

      this.getProductsCount = this.components[0].allowPaging ? result['@odata.count'] : result.value.length;
    }, result => {

    });
  }

  grid0LoadData(event: any) {
    this.test.getProducts(`${event.filter}`, this.components[0].allowPaging ? event.top : null, this.components[0].allowPaging ? event.skip : null, `${event.orderby}`, this.components[0].allowPaging)
    .then(result => {
      this.getProductsResult = result.value;

      this.getProductsCount = this.components[0].allowPaging ? result['@odata.count'] : result.value.length;
    }, result => {

    });
  }

  grid0Delete(event: any) {
    this.test.deleteProduct(event.Id)
    .then(result => {
      this.messages.push({ severity: "success", summary: `Success`, detail: `Product with Id:${event.Id} deleted!` });
    }, result => {
      this.messages.push({ severity: "error", summary: `Error`, detail: `Unable to delete Product with Id:${event.Id}` });
    });
  }

  grid0Select(event: any) {
    if (window.innerWidth >= 500) { 
      this.router.navigate([{ outlets: { popup: ['edit-product', event.Id] } }]);
    } else {
      this.router.navigate(['edit-product', event.Id]);
    }
  }

  grid0Add(event: any) {
    if (window.innerWidth >= 500) { 
      this.router.navigate([{ outlets: { popup: ['add-product'] } }]);
    } else {
      this.router.navigate(['add-product']);
    }
  }

  constructor(injector: Injector) {
    this.router = injector.get(Router);

    this._location = injector.get(Location);

    this.route = injector.get(ActivatedRoute);

    this.test = injector.get(TestService);
    this.security = injector.get(SecurityService);
  }
}
